#!/usr/bin/env bash
#
# Summary: Set or show the local application-specific erlang release
#
# Usage: erlenv local <release>
#        erlenv local --unset
#
# Sets the local application-specific erlang release by writing the
# release name to a file named `.erlang-release'.
#
# When you run a erlang command, erlenv will look for a `.erlang-release'
# file in the current directory and each parent directory. If no such
# file is found in the tree, erlenv will use the global erlang release
# specified with `erlenv global'. A release specified with the
# `ERLENV_RELEASE' environment variable takes precedence over local
# and global releases.
#
# For backwards compatibility, erlenv will also read release
# specifications from `.erlenv-release' files, but a `.erlang-release'
# file in the same directory takes precedence.
#
# <release> should be a string matching a erlang release known to erlenv.
# The special release string `system' will use your default system erlang.
# Run `erlenv releases' for a list of available erlang releases.

set -e
[ -n "$ERLENV_DEBUG" ] && set -x

# Provide erlenv completions
if [ "$1" = "--complete" ]; then
  echo --unset
  echo system
  exec erlenv-releases --bare
fi

ERLENV_RELEASE="$1"

if [ "$ERLENV_RELEASE" = "--unset" ]; then
  rm -f .erlang-release .erlenv-release
elif [ -n "$ERLENV_RELEASE" ]; then
  if [ "$(ERLENV_RELEASE= erlenv-release-origin)" -ef .erlenv-release ]; then
    rm -f .erlenv-release
    { echo "erlenv: removed existing \`.erlenv-release' file and migrated"
      echo "       local release specification to \`.erlang-release' file"
    } >&2
  fi
  erlenv-release-file-write .erlang-release "$ERLENV_RELEASE"
else
  erlenv-release-file-read .erlang-release ||
  erlenv-release-file-read .erlenv-release ||
  { echo "erlenv: no local release configured for this directory"
    exit 1
  } >&2
fi
